---
- name: configure gogs (install page)
  uri:
    url: "http://{{ gogs_hostname }}:{{ gogs_http_port }}/install"
    method: POST
    headers:
      Content-Type: "application/x-www-form-urlencoded"
    body_format: form-urlencoded
    body:
      db_type: "{{ gogs_db_type }}"
      db_host: "{{ gogs_db_host }}"
      db_user: "{{ gogs_db_user }}"
      db_passwd: "{{ gogs_db_pass }}"
      db_name: "{{ gogs_db_name }}"
      db_path: "{{ gogs_db_path if gogs_db_type == 'SQLite3' else '' }}"
      app_name: "{{ gogs_app_name }}"
      repo_root_path: "{{ gogs_repo_root_path }}"
      run_user: "{{ gogs_user }}"
      domain: "{{ gogs_hostname }}"
      ssh_port: "{{ gogs_ssh_port }}"
      http_port: "{{ gogs_http_port }}"
      app_url: "http://{{ gogs_hostname }}:{{ gogs_http_port }}/"
      log_root_path: "{{ gogs_log_path }}"
      enable_captcha: "{{ gogs_enable_captcha }}"
      admin_name: "{{ gogs_admin_username }}"
      admin_passwd: "{{ gogs_admin_password }}"
      admin_confirm_passwd: "{{ gogs_admin_password }}"
      admin_email: "{{ gogs_admin_email }}"
    status_code: [200, 302, 404]
  register: gogs_install_resp
  changed_when: gogs_install_resp.status == 302

- name: try to access gogs
  uri:
    url: "http://{{ gogs_hostname }}:{{ gogs_http_port }}/"
    status_code: 200
  register: gogs_startup_resp
  until: (gogs_startup_resp is defined) and (gogs_startup_resp.status == 200)
  retries: "{{ gogs_connection_retries }}"
  delay: "{{ gogs_connection_delay }}"

- name: get access token
  uri:
    url: "http://{{ gogs_hostname }}:{{ gogs_http_port }}/api/v1/users/{{ gogs_admin_username }}/tokens"
    method: POST
    headers:
      Content-Type: application/json
    body: "{{ lookup('template', 'templates/token.json.j2') }}"
    body_format: json
    user: "{{ gogs_admin_username }}"
    password: "{{ gogs_admin_password }}"
    force_basic_auth: true
    status_code: [201]
  register: gogs_get_access_token_resp

- name: register access token
  set_fact:
    gogs_access_token: "{{ gogs_get_access_token_resp.json.sha1 }}"

- name: create users
  include: configure-users.yml
  with_items: "{{ gogs_users }}"
  loop_control:
    loop_var: user_item
  when: gogs_users is defined

- name: create organizations
  include: configure-orgs.yml
  with_items: "{{ gogs_orgs }}"
  loop_control:
    loop_var: org_item
  when: gogs_orgs is defined

- name: create repositories
  include: configure-repo.yml
  with_items: "{{ gogs_repos }}"
  loop_control:
    loop_var: repo_item
  when: gogs_repos is defined
